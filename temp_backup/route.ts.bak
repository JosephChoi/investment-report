import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { supabaseAdmin } from '@/lib/supabase-admin';

export async function POST(request: NextRequest): Promise<NextResponse> {
  console.log('포트폴리오 파일 업로드 API 시작');
  
  // 환경변수 확인
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
  
  console.log('환경 변수 확인:', {
    'URL 존재': !!supabaseUrl,
    'Service Role Key 존재': !!serviceRoleKey,
    'Service Role Key 길이': serviceRoleKey?.length
  });
  
  if (serviceRoleKey) {
    console.log('Service Key 마지막 문자:', serviceRoleKey.slice(-1), 
                'ASCII 코드:', serviceRoleKey.charCodeAt(serviceRoleKey.length - 1));
  }
  
  try {
    // 요청 헤더에서 인증 토큰 확인
    const authHeader = request.headers.get('Authorization');
    console.log('인증 헤더 존재:', authHeader ? '있음' : '없음');
    
    // 인증 토큰이 없으면 오류 반환
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      console.error('인증 헤더가 없거나 올바르지 않습니다.');
      return NextResponse.json({
        success: false,
        error: '유효한 인증 토큰이 필요합니다. 다시 로그인해주세요.'
      }, { status: 401 });
    }
    
    const tokenFromHeader = authHeader.substring(7);
    console.log('헤더에서 토큰 추출됨 (길이):', tokenFromHeader.length);
    
    // Supabase 클라이언트 생성
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
    );
    
    // 토큰으로 사용자 검증
    const { data: { user }, error: authError } = await supabase.auth.getUser(tokenFromHeader);
    
    if (authError || !user) {
      console.error('사용자 검증 실패:', authError || '사용자 정보 없음');
      return NextResponse.json({
        success: false,
        error: '인증에 실패했습니다. 다시 로그인해주세요.'
      }, { status: 401 });
    }
    
    console.log('사용자 검증 성공:', user.id);
    
    // 관리자 권한 확인
    const { data: userData, error: userError } = await supabaseAdmin
      .from('users')
      .select('role')
      .eq('id', user.id)
      .single();
    
    if (userError) {
      console.error('사용자 정보 조회 오류:', userError);
      return NextResponse.json({
        success: false,
        error: '사용자 정보를 조회할 수 없습니다.'
      }, { status: 500 });
    }
    
    if (!userData || userData.role !== 'admin') {
      console.error('관리자 권한이 없는 사용자:', userData?.role);
      return NextResponse.json({
        success: false,
        error: '관리자 권한이 필요합니다.'
      }, { status: 403 });
    }
    
    // 폼 데이터 처리
    const formData = await request.formData();
    const file = formData.get('file') as File;
    const fileName = formData.get('fileName') as string;
    const portfolioType = formData.get('portfolioType') as string;
    const year_month = formData.get('year_month') as string;
    const year = formData.get('year') as string;
    const month = formData.get('month') as string;
    
    console.log('폼 데이터 확인:', {
      파일명: fileName,
      포트폴리오타입: portfolioType,
      연월: year_month,
      연도: year,
      월: month
    });
    
    if (!file || !fileName || !portfolioType || !year_month || !year || !month) {
      return NextResponse.json({
        success: false,
        error: '필수 정보가 누락되었습니다.'
      }, { status: 400 });
    }
    
    // 간소화된 파일 업로드 로직 (성공 응답만 반환)
    // 실제 로직은 추가 구현 필요
    console.log('파일 업로드 단계까지 성공적으로 도달했습니다.');
    
    return NextResponse.json({
      success: true,
      message: '파일이 성공적으로 업로드되었습니다.'
    });
    
  } catch (error: any) {
    console.error('포트폴리오 파일 업로드 중 오류 발생:', error);
    return NextResponse.json({ 
      success: false, 
      error: `데이터 처리 중 오류가 발생했습니다: ${error.message}` 
    }, { status: 500 });
  }
} 